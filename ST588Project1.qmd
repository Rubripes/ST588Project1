---
title: | 
     | ST588 Project 1
     | Matt Bray
     | Tyler Hunt
format: html
code-overflow: wrap
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

## Project Introduction

In our Data Science for Statisticians course we have learning how to do the following:

1.  Work with Base R
2.  Leverage the tidyverse library to read, manipulate and analyze data
3.  Build functions
4.  Build API Calls

Using this (nonexhaustive) list of skills and more, we are going to explore person-level data within the Public Use Microdata Sample (PUMS) Census dataset. Throughout this document we will build functions to read, summarize and plot the data. We will provide a narrative that explains the code and the functionality.

## Install Packages

Before getting into functions and technical details, it is important that the user have the appropriate packages installed and read into the session. Without these libraries the code will *NOT* run.

*Notes for user: You should load the packages in the below code chunk using install.packages() to load on your local machine.*

```{r}
library("tidyverse")
library("censusapi")
library("tidycensus")
library("jsonlite")
library("dplyr")
library("lubridate")
```

## Basic API Testing

Before building our API from scratch, lets use a specific API URL to ensure that we can retrieve data from the API, parse the data, and format as a tibble.

Below we are calling the GET function from the httr library to retrieve data from this API URL <https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24>. Feel free to copy and paste this into your web browser. You should see some data in your web browser.

In the below, the output is less friendly...

```{r}
censusApiTest <- httr::GET(paste('https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,MAR&SCHL=24'))

censusApiTest
```

Below, we are building a function that takes the raw data (the input) and returns a tibble as the output. We are using a combination of pre-built functions from our libraries to parse the raw data to JSON. The first row represents our column headers while the rest of the rows represent the data points.

We construct the tibble by passing the data points and using our headers to assign column names to the tibble.

You can see the output is much prettier (and easier to work with) than before!

```{r}
rawToTibble <- function(rawData){
  jsonData <- fromJSON(rawToChar(rawData$content))
  ## Extract column names
  colNames <- jsonData[1,]
  
  # Remove the first row from the data 
  jsonData <- jsonData[-1,]
  
  tibbleData <- as_tibble(jsonData)
  colnames(tibbleData) <- colNames
  return(tibbleData)
}

rawToTibble(censusApiTest)
```

## Some Helper Functions for Querying the API

Our functions used the build and query APIs rely on a series of other functions. These other functions were built to segment complex problems into modules, reduce duplicate code and improve readability for technical users.

Brief explanations fo each helper function:

1.  *checkVarsValid* - Our function used to query the API can only accept certain variables. This function ensures the variables passed by the user (vars) are all in the list of valid variables (validVars). If not, the function will stop and tell the user that they have provided an invalid variable(s).
2.  *varsLkpTibble* - Sometimes our variables require that the user lookup those variables and fetch a different attribute from that lookup. These values can vary year to year, so the user must pass the year, the name of the variable and a column name for the lookup value (just "lkpVal" by default). A tibble is returned.
3.  *midTimeFunc* - Some variables represent an interval of time. We want to return the midpoint of that interval, but the raw data type is not user friendly. This function takes start and ends of the interval in the format "3:29 p.m." and transforms into HMS format
4.  *lkpToMiddleTime* - This helper function leverages our two (2) previous helper functions to lookup time intervals in the string format "3:29 p.m. to 3:33 p.m", retrieve the median in the interval, cast as HMS format and return the transformed tibble.
5.  *factorLkp* - When given categorical variables as integers (1,2,3...etc) we want to return meaningful character values. We again use our helper function *varsLkpTibble* to lookup the values for a specific year. Using the factor() function, we pass our original data points, an ordered list of integers as our levels and the paired character values as our labels. This is also applied directly to a tibble

```{r}
checkVarsValid <- function(vars,validVars){
    if (!all(vars %in% validVars)) {
    stop("Invalid variables: ", paste(vars[!vars %in% validVars], collapse = ", "))
  }
}

varsLkpTibble <- function(year,varName,lkpVal="lkpVal"){
  rawData <- httr::GET(url=paste0('https://api.census.gov/data/',year,'/acs/acs1/pums/variables/',varName,'.json'))
  jsonData <- fromJSON(rawToChar(rawData$content))
  tibbleData <- as_tibble(jsonData$values$item)
  tibbleData <- tibbleData %>%
    pivot_longer(cols=names(tibbleData),
                 names_to = varName,
                 values_to = lkpVal
                 )
  return(tibbleData)
}

midTimeFunc <- function(startTime,endTime){
  midAddlSecs <- as.numeric(difftime(endTime,startTime,units="secs"))/2
  midTotalSecs <- as.numeric(startTime) + midAddlSecs
  midhours <- floor(midTotalSecs/(60*60))
  midminutes <- floor((midTotalSecs-(60*60*midhours))/60)
  midseconds <- floor((midTotalSecs-(60*60*midhours)-60*midminutes)/60)
  timeString <- paste(midhours,midminutes,midseconds,sep=":")
  hmsTime <- hms::parse_hms(timeString)
  return(timeString)
}

lkpToMiddleTime <- function(tibble,year=2022,timeVar){
  apiData <- varsLkpTibble(year=year,varName = timeVar,lkpVal = "TIME_INTERVAL")
  intervalTibble <- inner_join(tibble,apiData)
  returnData <- intervalTibble %>%
    select(-c(timeVar)) %>%
    mutate(TIME_INTERVAL = ifelse(TIME_INTERVAL == "N/A (not a worker; worker who worked from home)", NA, TIME_INTERVAL))
  names(returnData) <- c(names(returnData)[1:(length(names(returnData))-1)],timeVar)
  returnData <- returnData %>%
    separate_wider_delim(timeVar,delim = " to ",names=c('StartTime','EndTime')) %>%
    mutate(StartTime = parse_time(gsub("\\.", "", StartTime),format = "%I:%M %p"),
           EndTime = parse_time(gsub("\\.", "", EndTime),format = "%I:%M %p"),
           MidTime = ifelse(!is.na(StartTime), midTimeFunc(StartTime,EndTime),NA)
           )
  returnData[[timeVar]] <- hms::as_hms(returnData$MidTime)
  returnData <- returnData %>%
    select(-c('StartTime','EndTime','MidTime'))
  return(returnData)
}

factorLkp <- function(tibbleData,year,catVar){
  apiData <- varsLkpTibble(year=year,varName = catVar)
  x <- tibbleData[[catVar]]
  levels <- sort(unique(x))
  apiData <- apiData %>%
    filter(get(catVar) %in% levels) %>%
    arrange(get(catVar))
  labels <- apiData$lkpVal
  newVec <- factor(x=x,levels=levels,labels = labels)
  tibbleData[[catVar]] <- newVec
  return(tibbleData)
}
```

## Querying the API

Finally, we are building our function to query the API.

### Inputs/Parameters

The user will pass the year (default = 2022), a vector of numeric variables (default = "AGEP","PWGTP"), a vector of categorical variables (default = "SEX"), a geography level (default = "ALL"). Optionally, the user can also pass the specific identifier for that geography level if they choose.

### Parameter Validation

The first part of the function validates that parameters meet certain criteria. That criteria is as follows:

1.  Only one year value should be passed in the parameter
2.  The year parameter value should be between 2010 & 2022
3.  Numeric variables, categorical variables and the geography level had to be valid variables in a pre-approved list
4.  One numeric variables other than PWGTP had to be passed in the numericVars parameter.
5.  One categorical variable must be passed in the catVars parameter

If these criteria are not met, a detailed stop() message is returned by the function

### Using Parameters to Construct API

To construct the API URL, we need the constant components (base), the year, a list of variables and the geography specification. Year is directly passed by the user with no transformations. We create our variables list by unioning the numericVars and catVars parameter values and delimiting with a comma (,).

For the geography specification, we use switch() and if else functions to follow these generic rules:

-   If the user passes "All" in geographyLevel, return an empty string
-   If the user passes another value in geography level return in the following format "geographyLevel:geographySpec". An example is "state:17" \_ If the user passes another value in geography level and does NOT include a geography spec, return everything for that level in the format (example) of "state:\*", with an asterik representing all.

Paste all of these string values together to construct the API.

```{r}
retrieveCensus <- function(year=2022,numericVars=c("AGEP","PWGTP"),catVars=c("SEX"),geographyLevel =c("All"),geographySpec = NULL){
  # Check if year is a single value AND the value passed is between 2010 and 2022
  
  if (length(year)!=1){
    stop("A single year must be passed")
  }
  
  if (year < 2010 | year > 2022){
    stop("The year passed must be between 2010 & 2022")
  }
  
  # Check if values passed in the numericVars (catVars) are within the numericOptions (catOptions) vector(s)
  
  numericReq <- "PWGTP"
  
  numericOptions <- c("AGEP","GASP","GRPIP","JWMNP","PWGTP")
  timeOptions <- c("JWAP","JWDP")
  
  numericTimeOptions <- c(numericOptions,timeOptions)
  
  checkVarsValid(var=numericVars,validVars = numericTimeOptions)
  
  catOptions <- c("FER","HHL","HISPEED","JWTRNS","SCH","SCHL","SEX")
  
  checkVarsValid(vars=catVars, validVars = catOptions)
  
  geographyOptions <- c("All","Region","Division","State")
  
  checkVarsValid(vars=geographyLevel, validVars = geographyOptions)
  
  ## If PWGTP not in the numericVars parameter, add it
  
  if (numericReq %in% numericVars) {
    numericVars <- numericVars
  } else {
    numericVars <- c(numericVars,numericReq)
  }
  
  ## Check to make sure the number of numeric variables that will be returned is NOT < 2. The number of categorical variables should not be < 1
  
  if (length(numericVars) < 2) {
    stop("One numeric variable other than ", paste(numericReq)," must be given in the numericVars parameter")
  }
  
  if (length(catVars) < 1) {
    stop("One categorical variable must be given to be returned")
  }
  
 ## If all variables are of valid length and valid values, paste them together to be passed in the API call
  
  regioninPrefix <- switch(
    geographyLevel,
    All = "",
    Division = "division",
    Region = "region",
    State = "state"
  )
  regioninSuffix <- ifelse(is.null(geographySpec),"*",geographySpec)
  
  regioninString <- if(regioninPrefix!=""){paste0('&for=',regioninPrefix,":",regioninSuffix)}
  
  allVarsReq <- c(numericVars,catVars)
  varString <- NULL
  
  for (value in allVarsReq){
    varString <- paste0(varString,value,if(value != allVarsReq[length(allVarsReq)]){","})
  }
  
  apiURL <- paste0('https://api.census.gov/data/',year,'/acs/acs1/pums?get=',varString,regioninString)
  
  rawData <- httr::GET(apiURL)
  
  data <- rawToTibble(rawData)
  
  ## Change data types to be appropriate
  
  for (value in intersect(numericVars,timeOptions)){
    data <- lkpToMiddleTime(data,year=year,timeVar = value)
  }
  
  data[numericVars[numericVars %in% numericOptions]] <- lapply(data[numericVars[numericVars %in% numericOptions]],as.numeric)
  
  for (value in catVars){
    data <- factorLkp(data,year=year,catVar = value)
  }
  
  return(data)
}
```

```{r}
state17 <- retrieveCensus(year=2022,numericVars=c("AGEP","PWGTP","JWDP"),catVars=c("FER","SEX"),geographyLevel = "State",geographySpec = 17)

state17
```

## Function to pass multiple years and retrieve data

```{r}
retrieveMultiYearCensus <- function(years=c(2022),numericVars=c("AGEP","PWGTP"),catVars=c("SEX"),geographyLevel =c("All"),geographySpec = NULL) {
  combinedTibble <- retrieveCensus(year=years[1],numericVars=numericVars,catVars=catVars,geographyLevel=geographyLevel,geographySpec = geographySpec)
  combinedTibble$year <- years[1]
  for (i in 2:length(years)) {
    yearTibble <- retrieveCensus(year=years[i],numericVars=numericVars,catVars=catVars,geographyLevel=geographyLevel,geographySpec = geographySpec)
    yearTibble$year <- years[i]
    combinedTibble <- dplyr::union(combinedTibble,yearTibble)
  }
  return(combinedTibble)
}
```

## Testing multi-year function

```{r}
#state17MultiYear <- retrieveMultiYearCensus(years=c(2021,2022),geographyLevel = "State",geographySpec = 17)

#state17MultiYear
```

## Test `retrieveCensus` function

This test dataset is intended to test that data called from the API using the retrieve Census function will be usable by the `censusSummerizR` function below.

1.  numeric and categorical variables were selected psuedo randomly to test function.
2.  extracted data were placed into `censusData` object.

```{r}
censusData<-retrieveCensus(year=2022, numericVars=c("AGEP", "GASP", "PWGTP", "JWAP", "JWDP"), catVars = c("SEX", "HHL"),geographyLevel = "State",geographySpec = 17)
```

### Check `retrieveCensus` function output object structure.

The code chunk below can be used to visualze the structure of the data extracted by the `retrieveCensus` function. These visualizations can be helpful to understand the types of data presented (in truncated form), some representative values, and help the developer think of ways these data can be manipulated during creation of downstream functions. This code has been commented out as the output takes up a lot of space!

```{r}
#names(censusData)
#length(names(censusData))
#str(censusData)
#head(censusData)
#censusData
```

# Create custom summary function

The `censusSummerizR` function takes the dataset object that is output from the `retrieveCensus` function and outputs a named list of the following:

-   Sample Mean and Sample Standard Deviation for the numeric variables
-   Sample counts of observations categorized by factor levels for factor variables

The `censusSummerizR` function takes the full dataset object and splits into two seperate datasets that are susequently utilized for statistical calulations and counts, as appropriate:

-   An object of numeric data
-   An object of categorical data

The user selects from a list of both numeric and categorical variables to summarize and if the variable requested by the user is not present in the supplied source dataset, the procedure stops and alerst the user:

`"You cannot subset data that was not pulled from API, re-pull desired variables"`

The output of the `censusSummerizR` function is a list of tibbles that contain:

-   A single tibble that calculates sample mean and sample standard deviation for all numeric variables, and
-   An individual tibble that summarizes counts of each factor for that variable

*Notes to user: `censusSummerizR` function will calculate weighted sample mean and weighted sample standard deviations for the numeric variables of interest and will calculate counts of the categorical variables of interest. User should select variables to summarize that were pulled from the PUMS Census API using one of the `retrieveCensus` or `retrieveMultiYearCensus` functions. Variables not in your starting dataset will cause `censusSummerizR` to stop. `PWGTP` should not be summarized as it is an observation weight.*

```{r}
censusSummerizR <- function(x, numericVars=c("AGEP","GASP","GRPIP","JWMNP"),   catVars=c("FER","HHL","HISPEED","JWTRNS","SCH","SCHL","SEX")){


#check user requested variables and create numeric and factor/character datasets to summarize seperately based on user choice of variables to explore

numericDataDefault <- x |>
  select(where(is.numeric))

charDataDefault <- x|>
  select(where(is.factor))

if(length(names(numericDataDefault))<length(numericVars)){
  stop("You cannot subset data that was not pulled from API, re-pull desired variables")
}

if(length(names(charDataDefault))<length(catVars)){
  stop("You cannot subset data that was not pulled from API, re-pull desired variables")
}


if(length(names(numericDataDefault))>length(numericVars)){
  numericData<- x |> 
    select(numericVars)
  } else {
  numericData<- numericDataDefault |>
    select(where(-"PWGTP"))
} 


if(length(names(charDataDefault$names))>length(catVars)){
  charData<- x |> 
    select(catVars)
  } else {
  charData<- charDataDefault 
}    

#create loop to mean each variable from numericData and place in list with name
splMean <- list()
for(i in 1:length(numericData)){
  splMean[[i]] <- as.numeric((sum(numericData[[i]] %*% censusData$PWGTP)/sum(censusData$PWGTP)))
  names(splMean)[i]<-paste(names(numericData[i]))
}

#create loop to calculate sample SD from numericData and place in list with name
splSD <- list()
for(i in 1:length(numericData)){
  splSD[[i]] <- (sqrt(sum(numericData[[i]]^2 %*% censusData$PWGTP)/sum(censusData$PWGTP)-splMean[[i]]^2))
  names(splSD)[i]<-paste(names(numericData[i]))
}

#coerce splMean and splSD to Tibbles
splMeanTbl<-as_tibble(splMean)
splSDTbl<-as_tibble(splSD)

#Create loop to generate counts for each categorical variable
catSummary <- list()
for(i in 1:length(charData)){
  catSummary[[i]]<- charData[i] |>
    group_by(charData[i]) |>
      summarize(n=n())
    names(catSummary)[i]<-paste("count", names(charData[i]), sep="_")
}

numSumRowNames <- as_tibble(c("splMean", "splSD"))
numericSum <- tibble()
numericSum <- as_tibble(bind_rows(splMeanTbl,splSDTbl))
numericSumNamed <- as_tibble(bind_cols(numSumRowNames,numericSum))

#Need to place "numericSumNamed" in its own named list so that output is visually appealing, and each object is of similar dimensions.
meanSD <-list(numericSumNamed)
names(meanSD) <- "Mean and SD"


#Return liSt of numeric and categorical summaries
return(c(catSummary,meanSD))

}

```

## Test out `censusSummerizR` Function

Now that the `censusSummerizR` function has been written, we need to make sure that it works as intended. The variables below are representative numeric and categorical variables and return summaries, exclusive of the "weight" variable, `PWGTP`.

```{r}
summaryList<-censusSummerizR(censusData, numericVars = c("AGEP", "GASP"), catVars = c( "SEX"))
summaryList

length(summaryList)
#Present example data in rendered webpage
knitr::kable(summaryList[1])
knitr::kable(summaryList[2])
knitr::kable(summaryList[3])
```
