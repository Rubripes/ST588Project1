---
title: | 
     | ST588Homework4
     | Matt Bray
     | Tyler Hunt
format: html
code-overflow: wrap
editor: visual
---

# Install tidy Census/Load library for API Package

## Notes for user: you should load the packages below if not loaded on your machine, and install the libraries as specified below.

```{r}
library("tidyverse")
library("censusapi")
library("tidycensus")
```

# Check names *can be removed from final project, or kept to help user find columns of interest*

```{r}
nameList <- listCensusMetadata(
  "acs/acs1/pums",
  vintage = 2022,
  type = "variables",
  include_values = FALSE
)
nameLista <- as_tibble(nameList)
head(nameLista) 
```

# Save Census Key

# User should define variable aKey with key generated from Census API key generator: https://api.census.gov/data/key_signup.html

## See help documentation for tidycensus package here: https://walker-data.com/tidycensus/reference/census_api_key.html

```{r}
#census_api_key(key="b8bf07f35eb3e0d8ab1f95f20172b2ff62eb4514", overwrite = FALSE, install = TRUE)
```

# Get data from Census API for State:17

```{r}
censusData <- getCensus(name="acs/acs1/pums", vintage = 2022, key = Sys.getenv("CENSUS_API_KEY") , vars = c("PWGTP", "AGEP", "GASP", "GRPIP", "JWAP", "JWDP", "JWMNP"), regionin="state:17")

#censusTbl<-as_tibble(censusData)
```

##Visualize Structure of censusData *can be removed from final project*

```{r}
head(censusTbl)
length(censusTbl$PWGTP)
```

## Create a function to help with querying the API
```{r}
checkVarsValid <- function(vars,validVars){
    if (!all(vars %in% validVars)) {
    stop("Invalid variables: ", paste(vars[!vars %in% validVars], collapse = ", "))
  }
}
```

```{r}
retrieveCensus <- function(year=2022,numericVars=c("AGEP","PWGTP"),catVars=c("SEX"),geographyLevel =c("All"),geographySpec = NULL){
  # Check if year is a single value AND the value passed is between 2010 and 2022
  
  if (length(year)!=1){
    stop("A single year must be passed")
  }
  
  if (year < 2010 | year > 2022){
    stop("The year passed must be between 2010 & 2022")
  }
  
  # Check if values passed in the numericVars (catVars) are within the numericOptions (catOptions) vector(s)
  
  numericReq <- "PWGTP"
  numericOptions <- c("AGEP","GASP","GRPIP","JWAP","JWDP","JWMNP","PWGTP")
  
  checkVarsValid(var=numericVars,validVars = numericOptions)
  
  catOptions <- c("FER","HHL","HISPEED","JWTRNS","SCH","SCHL","SEX")
  
  checkVarsValid(vars=catVars, validVars = catOptions)
  
  geographyOptions <- c("All","Region","Division","State")
  
  checkVarsValid(vars=geographyLevel, validVars = geographyOptions)
  
  ## If PWGTP not in the numericVars parameter, add it
  
  if (numericReq %in% numericVars) {
    numericReturn <- numericVars
  } else {
    numericReturn <- c(numericVars,numericReq)
  }
  
  ## Check to make sure the number of numeric variables that will be returned is NOT < 2. The number of categorical variables should not be < 1
  
  if (length(numericReturn) < 2) {
    stop("One numeric variable other than ", paste(numericReq)," must be given in the numericVars parameter")
  }
  
  if (length(catVars) < 1) {
    stop("One categorical variable must be given to be returned")
  }
  
 ## If all variables are of valid length and valid values, paste them together to be passed in the API call
  
  
  api_vars <- c(numericVars,catVars)
  regioninPrefix <- switch(
    geographyLevel,
    All = NULL,
    Division = "division",
    Region = "region",
    State = "state"
  )
  
  # Below is for testing
  
  regioninSuffix <- 17
  
  ## Constructing the censusData
  
  censusData <- getCensus(name="acs/acs1/pums",vintage=year,key=Sys.getenv("CENSUS_API_KEY"),vars=api_vars,regionin=paste(regioninPrefix,as.character(regioninSuffix),sep=":"))
  
  return(as_tibble(censusData))
}
```

## Storing returned tibble for working. Can be removed final project
```{r}
state17 <- retrieveCensus(geographySpec = "State")
```

